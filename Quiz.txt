Доступность делает вашу веб-страницу легкой для всех людей - даже для людей с ограниченными возможностями.

В этом курсе вы создадите веб-страницу с викториной. Вы узнаете о таких инструментах доступности, как сочетания клавиш, атрибуты ARIA и передовые методы дизайна.



Шаг 1
Добро пожаловать на первую часть Quiz Accessibility. Поскольку вы становитесь опытным разработчиком HTML и CSS, мы начинаем с базовых правил.

Начните этот путь доступности, предоставив атрибут lang для вашего элемента html. Это поможет экрану-читателям в определении языка страницы.



Шаг 2
Возможно, вы уже знакомы с мета-элементом; он используется для указания информации о странице, такой как заголовок, описание, ключевые слова и автор.

Дайте вашей странице мета-элемент с соответствующим значением charset.

Атрибут charset указывает кодировку страницы, и в настоящее время UTF-8 является единственной кодировкой, поддерживаемой большинством браузеров.



Шаг З
Продолжая с мета-элементами, viewport показывает браузеру, как обработать страницу. Включение одного улучшает визуальную доступность на мобильном, и улучшает SEO (поисковая оптимизация).

Добавить viewport с атрибутом content, описывающим width и initial-scale страницы.



Шаг 4
Еще один важный мета-элемент для доступности и SEO - это определение описания. Значение атрибута контента используется поисковиками для описания страницы.

Добавьте мета-элемент с атрибутом name, установленным description, и дайте ему полезный атрибут.



Шаг 5
Наконец, в head, элемент title полезен для читателей экрана, чтобы понять содержание страницы. Кроме того, это важная часть SEO.

Дайте вашей странице заголовок, который будет описательным и кратким.



Шаг 6
Навигация - это ключевая часть доступности, и экранные читатели полагаются на вас, чтобы обеспечить структуру вашей страницы. Это достигается с помощью семантических элементов HTML.

Добавьте header и main элемент к вашей странице.

Элемент header будет использоваться для введения страницы, а также обеспечить навигационное меню.

Элемент main будет содержать основное содержание вашей страницы.



Шаг 7
В header, предоставьте контекст о странице, вложив один элемент img, h1 и nav.

img должен указывать на https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg, иметь идентификатор логотипа и альтернативный текст freeCodeCamp.

Текст h1 должен содержать HTML/CSS Quiz.



Шаг 8
На данный момент img принимает свой размер по умолчанию, который слишком большой. CSS имеет функцию max, которая возвращает наибольшее из множества разделённых запятой значений. Например:

Пример кода

img {
  width: max(250px, 25vw);
}

В примере выше ширина изображения будет составлять 250 пикселей, если ширина окна меньше 1000 пикселей. Если ширина окна больше 1000 пикселей, ширину изображения будет 25vw. Это связано с тем, что 25vw равен 25% ширины окна.

Масштабировать изображение, используя его id в качестве селектора и устанавливая ширину максимум 10rem или 18vw.



Шаг 9
Как описано в freeCodeCamp Style Guide, логотип должен иметь соотношение 35/4 и быть заполненным вокруг текста.

Сначала измените background-color на #0a0a23, чтобы вы могли видеть логотип. Затем используйте свойство aspect-ratio отношения к размеру, чтобы установить желаемое отношение к размеру на 35 / 4. В конце добавьте padding 0.4rem вокруг.



Шаг 10
Сделайте header полностью шириной своего родительского контейнера, установите его высоту на 50px и установите background-color на #1b1b32. Затем установите display для использования Flexbox.



Шаг 11
Измените цвет шрифта h1 на #f1be32, и установите размер шрифта на min(5vw, 1.2em).



Шаг 12
Чтобы включить навигацию на странице, добавьте неупорядоченный список со следующими тремя пунктами списка:

INFO
HTML
CSS

Текст элементов списка должен быть заключен в теги ссылки.



Шаг 13
Дочерний комбинаторный селектор > используется между селекторами для определения только элементов, которые соответствуют второму селектору и являются прямым дочерним элементом первого селектора.

Это может быть полезно, когда у вас есть глубоко вложенные элементы и вы хотите контролировать масштаб вашего стиля.

Используйте > селектор, чтобы выбрать неупорядоченные элементы списка внутри элементов nav и использовать Flexbox для равномерного расположения дочерних элементов.



Шаг 14
Поскольку это викторина, вам понадобится форма для того, чтобы пользователи могли представить ответы. Вы можете семантически разделить содержание формы с помощью элементов section.

В главном элементе создайте форму с тремя вложенными элементами section. Затем отправьте форму по адресу https://freecodecamp.org/practice-project/accessibility-quiz, используя правильный метод.



Шаг 15
Чтобы увеличить доступность страницы, атрибут role может быть использован для указания цели за элементом на странице вспомогательных технологий. Атрибут role является частью Web Accessibility Initiative (WAI), и принимает заданные значения.

Отдавать каждому элементу section, role region.



Шаг 16
Для каждой роли region требуется label, который помогает пользователям экранного чтения понять цель региона. Один метод добавления label - добавить элемент заголовок внутри региона и затем ссылаться на него с атрибутом aria-labelledby.

Добавьте следующие атрибуты aria-labelledby для элементов section:

- student-info
- html-questions
- css-questions

Затем, в каждом элементе section, вложить один элемент h2 с идентификатором, соответствующий атрибуту aria-labelledby. Дать каждому h2 подходящее текстовое содержание.



Шаг 17
Шрифт играет важную роль в доступности страницы. Некоторые шрифты легче читаются, чем другие, и это особенно верно на экранах с низким разрешением.

Изменить шрифт для элементов h1 и h2 на Verdana, а также использовать другой веб-шрифт в семействе sans-serif как запасной вариант.

Также, добавьте  border-bottom 4px solid #dfdfe2 к h2 элементам, чтобы разделить section.



Шаг 18Passed
Для того, чтобы иметь возможность перемещаться по странице, каждый элемент ссылки должен иметь href, соответствующий идентификатору элементов h2.



Шаг 19
Заполнение содержания викторины, ниже #student-info, добавление трех элементов div с классом info.

Затем, в каждом div вложить один элемент label и один элемент input.



Шаг 20
Важно связать каждый элемент input с соответствующим элементом label. Это дает пользователям вспомогательных технологий визуальную ссылку на input.

Это делается, давая label атрибут for, который содержит id input.

Этот section будет содержать имя, адрес электронной почты и дату рождения студента. Укажите элементы для описания, соответствующие атрибутам, а также текстовое содержание. Затем привязывайте входные элементы к соответствующим элементам.



Шаг 21
Учитывая передовые методы для input форм, каждый input должен иметь соответствующий type и атрибут name. Затем, дайте первому input атрибут placeholder.



Шаг 22
Даже если вы добавили placeholder к первому входному элементу в предыдущем уроке, это на самом деле не лучшая практика для обеспечения доступности; слишком часто пользователи путают текст placeholder с реальным исходным значением - они думают, что в input уже есть значение.

Удалить текст placeholder из первого элемента ввода, полагаясь на этикетку как на наилучшую практику.



Шаг 23
Во втором элементе section добавьте два элемента div с классом question-block.

Затем, в каждом div.question-block элементе, добавьте один h3 элемент с текстом возрастающих чисел, начиная с 1, и один fieldset элемент с классом question.



Шаг 24
Количество вопросов недостаточно описательное. Это особенно верно для пользователей с нарушениями зрения. Один из способов обойти такую проблему, не добавляя видимого текста в элемент, - это добавить текст, который может прочитать только экран-читатель.

Вложить элемент span с классом sr-only после числа в каждый из элементов h3.



Шаг 25
Добавьте в первый элемент span текст Question.

Во втором элементе span добавьте текст Question.



Шаг 26
Только текст .sr-only по-прежнему виден. Существует общая схема визуального скрытия текста для чтения только на экране.

Этот шаблон устанавливает следующие свойства CSS:

Пример кода

position: absolute;
width: 1px;
height: 1px;
overflow: hidden;
clip: rect(0, 0, 0, 0);
clip-path: inset(50%);
white-space: nowrap;

Используйте вышеуказанное для определения правила CSS . sr-only.



Шаг 27
Каждый fieldset будет содержать вопрос true/false.

В каждом fieldset, создайте один элемент legend и один элемент ul с двумя опциями.